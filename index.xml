<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Klanik tech blog</title>
    
    
    
    <link>/</link>
    <description>Recent content on Klanik tech blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Oct 2020 17:54:02 +0200</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>APM en mode avec CI/CD avec sitespeed.io</title>
      <link>/posts/apm_cicd/</link>
      <pubDate>Tue, 13 Oct 2020 17:54:02 +0200</pubDate>
      
      <guid>/posts/apm_cicd/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;Lâ€™Â«â€¯Application Performance Managementâ€¯Â» couvre lâ€™ensemble de la dÃ©marche visant Ã  monitorer et amÃ©liorer la performance des sites et applications web. Câ€™est donc une discipline importante Ã  Ã©poque oÃ¹ le temps de chargement trop long dâ€™une page peut ruiner la rÃ©putation ou le business dâ€™une marque ou entreprise.&lt;/p&gt;
&lt;p&gt;Jâ€™ai prÃ©sentÃ© sitespeed.io, outil de test de la performance des sites web il y a quelques annÃ©es dÃ©jÃ . Il vous suffit de (re)lire ce billet pour vous rendre compte de tout le bien que jâ€™en pensais Ã  lâ€™Ã©poque. Et Ã§a nâ€™a pas changÃ©; bien au contraire vu les nombreuses Ã©volutions positives quâ€™a connu cet outil depuis.&lt;/p&gt;
&lt;p&gt;Je vous propose dans ce qui pourrait Ãªtre la suite du prÃ©cÃ©dent billet dâ€™automatiser les tests faits avec sitespeed.io et de voir quels sont les possibilitÃ©s dâ€™intÃ©gration dans une chaÃ®ne de CI/CD. A partir de lÃ , il devient possible de tester une application ou site web:&lt;/p&gt;
&lt;p&gt;A la faÃ§on GitOps, de faÃ§on automatique Ã  la moindre modification du dÃ©pÃ´t du code source applicatif.
Dans un esprit plus Â«â€¯observabilitÃ©, monitoringâ€¯Â», ordonnancer des contrÃ´les Ã  intervalles rÃ©guliers de lâ€™application.
Quoique ce soit votre prÃ©fÃ©rence, il me paraÃ®t important de rappeler que le mode opÃ©ratoire le plus pratique pour sitespeed.io est basÃ© sur une image Docker et que câ€™est celui-ci que nous allons utiliser. Cela permet dâ€™envisager lâ€™automatisation des choses suivantes:&lt;/p&gt;
&lt;p&gt;DÃ©marrage dâ€™un conteneur Docker Ã  partir de lâ€™image officielle sitespeed.io.
ExÃ©cution du test sitespeed.io dans ce conteneur.
RÃ©cupÃ©ration des rÃ©sultats.
Destruction du conteneur Docker.
CONFIGURATION DE SITESPEED.IO
Il est possible de configurer sitespeed.io de deux faÃ§ons diffÃ©rentes:&lt;/p&gt;
&lt;p&gt;A partir dâ€™options et arguments sur la ligne commande.
A partir dâ€™un fichier de configuration au format JSON.
Nous privilÃ©gierons la deuxiÃ¨me mÃ©thode, le fichier JSON pouvant Ãªtre facilement gÃ©nÃ©rÃ© automatiquement depuis la description, le Â«â€¯blueprintâ€¯Â» de lâ€™application.&lt;/p&gt;
&lt;p&gt;Configuration pour le CI/CD
La liste des options de configuration de sitespeed.io est juste Ã©norme et je ne compte pas vous les dÃ©crire toutesâ€¦ Heureusement pour tout le monde! Nous allons juste parcourir les quelques options qui me semblent intÃ©ressantes Ã  utiliser quand sitespeed.io est Â«â€¯opÃ©rÃ©â€¯Â» en mode automatique.&lt;/p&gt;
&lt;p&gt;Configuration S3
Il est possible de stocker le rapport HTML gÃ©nÃ©rÃ© par sitespeed.io dans un stockage compatible Amazon S3. Cette option est utile si vous souhaitez par exemple que les dÃ©veloppeurs puissent avoir accÃ¨s au dÃ©tail dâ€™un test rÃ©alisÃ©. Jâ€™utilise Minio comme stockage compatible S3 et la configuration nÃ©cessaire pour que cela fonctionne avec sitespeed.io est la suivante:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»:&lt;/span&gt; 
{ &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;endpoint&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»:&lt;/span&gt; 
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;http://192.168.1.7:9000&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»,&lt;/span&gt; 
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;bucketname&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;speedio&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»,&lt;/span&gt; 
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;removeLocalResult&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;true,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;miniouser&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;secret&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;miniopassword&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;options&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s3ForcePathStyle&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;true,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;s3BucketEndpoint&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;true&lt;/span&gt; } &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Il est possible dâ€™utiliser le module Â«â€¯Google Cloud Storageâ€¯Â» pour arriver Ã  un rÃ©sultat identique.&lt;/p&gt;
&lt;p&gt;Configuration Graphite
Il paraÃ®t Ã©vident quâ€™une chaÃ®ne de CI/CD sans monitoring nâ€™en est pas vraiment uneâ€¦ Mais Ã§a va toujours mieux en le reprÃ©cisant ðŸ™‚ Dans ce scope, Graphite reste bien sÃ»r un standard et nous allons donc utiliser le module correspondant pour pouvoir rÃ©cupÃ©rer lâ€™ensemble des mÃ©triques rÃ©coltÃ©es par sitepseedio au cours dâ€™un test. Grafana permettra la visualisation des mÃ©triques rÃ©coltÃ©es. Voici la configuration du module Graphite:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;graphite&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»:&lt;/span&gt; { &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;host&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;192.168.1.79&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;9109,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;includeQueryParams&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;false,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;arrayTags&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;false,&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»:&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â«&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;speedio&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;Â»&lt;/span&gt; }&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Câ€™est une configuration minimale pour envoyer les mÃ©triques vers un serveur compatible Graphite mais vous pouvez aller beaucoup plus loin avec des tags, des annotations Ã  disposition. Pour ma part, jâ€™utilise plutÃ´t Prometheus que Graphite et jâ€™ai donc utilisÃ© Graphite Exporter et ces possibilitÃ©s de Â«â€¯mappingâ€¯Â» pour arriver au mÃªme rÃ©sultat quâ€™avec un serveur Graphite. Vous pouvez aussi utiliser InfluxDB en lieu et place de Graphite si tel est votre bon plaisir.&lt;/p&gt;
&lt;p&gt;Autres options de configuration intÃ©ressantes
Je nâ€™ai pas encore mis en oeuvre les options de configuration suivantes mais il est possible, Ã  lâ€™instar du module Graphite vu plus haut, dâ€™envoyer des annotations vers Grafana. Il est Ã©galement possible de paramÃ©trer un Â«â€¯budget performance Â» pour votre application. Et enfin, la toute nouvelle version 12 de sitespeed.io permet dÃ©sormais de calculer lâ€™impact Ã©cologique de votre application web.&lt;/p&gt;
&lt;p&gt;INTÃ‰GRATION CI/CD
Une fois sitespeed.io configurÃ©, il ne reste plus quâ€™Ã  orchestrer le tout avec lâ€™outil de votre choix; Ansible dans mon cas. Voici donc un playbook Â«â€¯quick and dirtyâ€¯Â» permettant de charger la liste des sites Ã  tester depuis un fichier web.txt et de crÃ©er le conteneur Docker pour chacun. Notez lâ€™appel au fichier de configuration avec &amp;ndash;config config.json. Un script bash aurait certainement pu faire lâ€™affaire mais utiliser Ansible ou un Ã©quivalent permet de pouvoir paramÃ©trer le tout finement et dâ€™aller plus loin avec par exemple un fichier de configuration diffÃ©rent par applicationâ€¦&lt;/p&gt;
&lt;p&gt;â€” â€“ name: sitespeed.io docker run hosts: localhost connection: local gather_facts: no become: no vars: iso8601_date: Â« {{ lookup(â€˜pipeâ€™, â€˜date -u +%Y-%m-%dT%H:%M:%S+00:00â€™) }}Â«  root_dir: Â« {{ lookup(â€˜envâ€™, â€˜PWDâ€™) }}Â«  tasks: â€“ name: docker_container | check url from file â€˜web.txtâ€™ with sitespeed.io docker_container: name: Â« speedio_{{ site_idx }}Â«  image: sitespeedio/sitespeed.io:12.1.0 auto_remove: yes network_mode: bridge recreate: yes command: Â« {{ item }} â€“config config.json Â» env: https_proxy: Â«  Â» http_proxy: Â«  Â» volumes: â€“ Â« {{ root_dir }}:/sitespeed.io Â» loop: Â« {{ lookup(â€˜fileâ€™, â€˜./web.txtâ€™).splitlines() }}Â«  loop_control: index_var: site_idx
Ceci nâ€™est bien sÃ»r quâ€™une base Ansible Ã  adapter Ã  votre environnement, votre contexte. Il reste Ã  intÃ©grer ce playbook dans un pipeline CI/CD, que ce soit Jenkins, Gitlab, Github ou Drone. Il est Ã©galement possible dâ€™exÃ©cuter ce playbook Ã  intervalles rÃ©guliers depuis Jenkins, Rundeck, AWX ou depuis votre logiciel de supervision.&lt;/p&gt;
&lt;p&gt;En fonction de lâ€™intÃ©gration choisie, il peut y avoir pas mal de travail annexe Ã  faire comme la construction de tableaux de bord pour Grafana, un fichier de mapping pour Graphite Exporterâ€¦ En guise de conclusion, les combinaisons envisageables sont trÃ¨s Ã©tendues.&lt;/p&gt;

        
        </description>
    </item>
    
    <item>
      <title>Introduction au serverless</title>
      <link>/posts/introduction_au_serverless/</link>
      <pubDate>Tue, 13 Oct 2020 17:52:51 +0200</pubDate>
      
      <guid>/posts/introduction_au_serverless/</guid>
      <description>
        
          
          
          
        
        
        &lt;p&gt;Je tiens Ã  prÃ©ciser que dans cet article je parle de dÃ©ploiement dâ€™applications Web et de scripts dâ€™automatisation, pas dâ€™applications client lourdes.&lt;/p&gt;
&lt;h1 id=&#34;le-serverless&#34;&gt;Le serverless&lt;/h1&gt;
&lt;p&gt;Le serverless est une mÃ©thode permettant de dÃ©ployer des morceaux dâ€™application sans se soucier de lâ€™infrastructure technique porteuse. Dans un dÃ©ploiement classique (on parle lÃ  bien de legacy mais Ã©galement de dÃ©ploiements type Docker EE / Kubernetes), notre application est bundlÃ©e et doit Ãªtre dÃ©ployÃ©e sur un ou plusieurs serveurs. Ce processus peut Ãªtre automatisÃ© et la couche dâ€™infrastructure un peu abstraite (coucou Kubernetes), mais le principe reste le mÃªme.&lt;/p&gt;
&lt;p&gt;Dans une architecture serverless, lâ€™application est Â« cassÃ©e Â» en modules, puis en fonctions, un peu comme dans un dÃ©veloppement normal, mais encore plus. En effet, il va sâ€™agir de dÃ©ployer chaque fonction de notre programme individuellement.&lt;/p&gt;
&lt;h1 id=&#34;le-fonctionnement-du-serverless-est-simple&#34;&gt;Le fonctionnement du serverless est simple&lt;/h1&gt;
&lt;p&gt;Une fonction (et ses ressources et dÃ©pendances) rÃ©side sur un serveur dâ€™exÃ©cution
Un Ã©vÃ©nement vient trigger la dite fonction
Cette derniÃ¨re sâ€™exÃ©cute et Ã©ventuellement (mais pas forcÃ©ment) produit un rÃ©sultat
Le rÃ©sultat produit est retournÃ© au dÃ©clencheur de lâ€™Ã©vÃ¨nement
Cela peut paraÃ®tre une idÃ©e saugrenue, mais une infrastructure serverless apporte Ã©normÃ©ment dâ€™avantages stratÃ©giques pour le dÃ©veloppement et la maintenabilitÃ© dâ€™une application :&lt;/p&gt;
&lt;p&gt;Chaque fonction peut Ãªtre Ã©crite dans un langage propre, ce qui est un des gros points du serverless. Un projet aux multiples facettes, porteur de backend Javascript, de scripts dâ€™automatisation Java, de scripts de maintenance Shell et dâ€™outils de statistiques Python peut voir toutes ses fonctions rÃ©unies dans un seul projet.
Chaque fonction peut Ãªtre trigger par un ou plusieurs types dâ€™Ã©vÃ©nements, permettant de dÃ©finir une fonction comme appelable par, par exemple, un appel http sur une URL dÃ©finie, mais Ã©galement un Ã©vÃ©nement systÃ¨me, un appel RPC, et mÃªme, avec des intÃ©grations plus poussÃ©es, un message Slack ou Discord, un Ã©vÃ©nement de base de donnÃ©es, etc.
Chaque fonction rÃ©side dans son propre environnement dâ€™exÃ©cution, ce qui permet dâ€™exÃ©cuter la mÃªme fonction dans plusieurs environnements, mais Ã©galement de gÃ©rer la scalabilitÃ© de chaque fonction indÃ©pendamment, ce qui veut dire que si une fonction nâ€™est pas utilisÃ©e, elle est tout simplement dÃ©sinstanciÃ©e du serveur dâ€™exÃ©cution (ce qui peut causer le problÃ¨me du Cold Start, expliquÃ© plus bas, mais fait quâ€™une fonction inutilisÃ©e ne vous coÃ»te rien).
En clair, votre Ã©quipe nâ€™a plus besoin dâ€™un cluster entier de machines pour dÃ©ployer son projet, mais juste dâ€™un provider serverless (comme AWS avec lambda), qui facturera simplement Ã  lâ€™utilisation.
Votre Ã©quipe de dÃ©veloppement nâ€™a plus besoin de se soucier dâ€™infrastructure, ce qui est un avantage considÃ©rable dans beaucoup de petites structures, mais Ã©galement dans des grosses structures oÃ¹ les dÃ©veloppeurs sont recrutÃ©s pourâ€¦ eh bien dÃ©velopper (ce point a tendance Ã  Ãªtre nÃ©gligÃ©, croyez-moi).
Le Time To Market est considÃ©rablement rÃ©duit, car lorsquâ€™une fonctionnalitÃ© est dÃ©veloppÃ©e est testÃ©e, vous avez juste besoin de redÃ©ployer la ou les fonctions impactÃ©e(s), ce qui se fait gÃ©nÃ©ralement en une Ã  deux commandes. La nouvelle version de la fonction est ensuite accessible Ã  la place de lâ€™ancienne, pour tous les triggers dÃ©finis, pour tout le monde. Facile non ?
Alors avec Ã§a, pourquoi continuer Ã  faire des applications classiques ? Eh bien le serverless, câ€™est bien, mais comme tout ce qui est bien et novateur, il vient Ã©galement avec son lot de problÃ©matiques :&lt;/p&gt;
&lt;p&gt;Il est plus compliquÃ© de dÃ©bugger et tester son application. Il est vrai que lâ€™environnement de production est plus compliquÃ© Ã  reproduire pour le dÃ©veloppement quâ€™avec admettons une image Docker ou un environnement JVM dÃ©fini. Le fait que lâ€™application soit cassÃ©e en plein de petites fonctions peut Ã©galement Ãªtre intimidant, mais câ€™est Ã©galement un moyen de bien sÃ©parer les diffÃ©rentes logiques, donc chacun son avis.
Les traitements longs nâ€™ont pas leur place en serverless, de par son architecture, faite pour des processus courts qui se contentent de rÃ©pondre rapidement Ã  un Ã©vÃ©nement. Les processus longs (quelques secondes Ã  quelques minutes) coÃ»teront cher (car facturÃ©s au temps dâ€™exÃ©cution) et pire, risqueront de se voir interrompus avant la fin.
La portabilitÃ© nâ€™est pas toujours assurÃ©e, car le serverless ne se repose pas (pas souvent) sur une infrastructure maÃ®trisÃ©e par lâ€™entreprise. Des outils pour rÃ©aliser diffÃ©rentes fonctions sont alors mises Ã  disposition par le provider, et ces fonctions lui sont propres, ce qui rend notre compte dÃ©pendant du provider.
Les performances de lâ€™application peuvent Ãªtre affectÃ©es, car, on le rappelle, chaque fonction tourne dans son propre environnement dâ€™exÃ©cution, son propre Â« conteneur Â» pour faire un parallÃ¨le avec Docker ou k8s, et si une fonction nâ€™est pas du tout utilisÃ©e, le provider va la scaller Ã  0 instances. Câ€™est Ã  la fois le plus gros avantage du serverless (car une fonction non utilisÃ©e ne coÃ»te rien), mais son plus gros inconvÃ©nient, car si une fonction scallÃ©e Ã  0 est appelÃ©e, il lui faut le temps de dÃ©marrer. Ce temps est gÃ©nÃ©ralement court (quelques secondes tout au plus), mais il faut savoir quâ€™il existe.
Pour information, ceci sâ€™appelle sobrement le Cold Start.&lt;/p&gt;
&lt;p&gt;Soyons clair, aucune de ces problÃ©matiques nâ€™est insurmontable. Des moyens existent pour les contourner, et le jeu en vaut la chandelle.&lt;/p&gt;
&lt;p&gt;Les outils du serverless
Si le serverless vous intÃ©resse, voici quelques outils, ressources et providers sur lesquelles vous devriez vous pencher :&lt;/p&gt;
&lt;p&gt;com, framework serverless permettant dâ€™accÃ©lÃ©rer le dÃ©veloppement et dâ€™Ã©muler un environnement serverless (par exemple AWS, Azure, Google, Kubeless, etc.). Ils ont Ã©galement un blog trÃ¨s complet et trÃ¨s actif qui parle de lâ€™actualitÃ© du serverless
Knative et Kubeless, deux outils permettant dâ€™ajouter un aspect serverless Ã  un cluster Kubernetes (vous connaissez mon amour pour k8s, jâ€™ai testÃ© les deux, je conseille les deux)
Apache Openwhisk, un provider serverless opensource (Ã  installer sur sa propre infrastructure)
AWS Lambda, car aprÃ¨s tout, actuellement, AWS, reste le provider prÃ©fÃ©rÃ© des entreprises qui se lancent dans lâ€™aventure serverless&lt;/p&gt;

        
        </description>
    </item>
    
  </channel>
</rss>